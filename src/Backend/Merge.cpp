#include "Merge.hpp"

#include "Backend/libgte.hpp"
#include "Common/RawTypeBrowser.hpp"

#include <array>
#include <numeric>
#include <stdexcept>

static const std::array<s16, 4096> tableOfRates
{
    0, 6, 13, 19, 25, 31, 38, 44,
    50, 57, 63, 69, 75, 82, 88, 94,
    101, 107, 113, 119, 126, 132, 138, 144,
    151, 157, 163, 170, 176, 182, 188, 195,
    201, 207, 214, 220, 226, 232, 239, 245,
    251, 257, 264, 270, 276, 283, 289, 295,
    301, 308, 314, 320, 326, 333, 339, 345,
    351, 358, 364, 370, 376, 383, 389, 395,
    401, 408, 414, 420, 426, 433, 439, 445,
    451, 458, 464, 470, 476, 483, 489, 495,
    501, 508, 514, 520, 526, 533, 539, 545,
    551, 557, 564, 570, 576, 582, 589, 595,
    601, 607, 613, 620, 626, 632, 638, 644,
    651, 657, 663, 669, 675, 682, 688, 694,
    700, 706, 713, 719, 725, 731, 737, 744,
    750, 756, 762, 768, 774, 781, 787, 793,
    799, 805, 811, 818, 824, 830, 836, 842,
    848, 854, 861, 867, 873, 879, 885, 891,
    897, 904, 910, 916, 922, 928, 934, 940,
    946, 953, 959, 965, 971, 977, 983, 989,
    995, 1001, 1007, 1014, 1020, 1026, 1032, 1038,
    1044, 1050, 1056, 1062, 1068, 1074, 1080, 1086,
    1092, 1099, 1105, 1111, 1117, 1123, 1129, 1135,
    1141, 1147, 1153, 1159, 1165, 1171, 1177, 1183,
    1189, 1195, 1201, 1207, 1213, 1219, 1225, 1231,
    1237, 1243, 1249, 1255, 1261, 1267, 1273, 1279,
    1285, 1291, 1297, 1303, 1309, 1315, 1321, 1327,
    1332, 1338, 1344, 1350, 1356, 1362, 1368, 1374,
    1380, 1386, 1392, 1398, 1404, 1409, 1415, 1421,
    1427, 1433, 1439, 1445, 1451, 1457, 1462, 1468,
    1474, 1480, 1486, 1492, 1498, 1503, 1509, 1515,
    1521, 1527, 1533, 1538, 1544, 1550, 1556, 1562,
    1567, 1573, 1579, 1585, 1591, 1596, 1602, 1608,
    1614, 1620, 1625, 1631, 1637, 1643, 1648, 1654,
    1660, 1666, 1671, 1677, 1683, 1689, 1694, 1700,
    1706, 1711, 1717, 1723, 1729, 1734, 1740, 1746,
    1751, 1757, 1763, 1768, 1774, 1780, 1785, 1791,
    1797, 1802, 1808, 1813, 1819, 1825, 1830, 1836,
    1842, 1847, 1853, 1858, 1864, 1870, 1875, 1881,
    1886, 1892, 1898, 1903, 1909, 1914, 1920, 1925,
    1931, 1936, 1942, 1947, 1953, 1958, 1964, 1970,
    1975, 1981, 1986, 1992, 1997, 2002, 2008, 2013,
    2019, 2024, 2030, 2035, 2041, 2046, 2052, 2057,
    2062, 2068, 2073, 2079, 2084, 2090, 2095, 2100,
    2106, 2111, 2117, 2122, 2127, 2133, 2138, 2143,
    2149, 2154, 2159, 2165, 2170, 2175, 2181, 2186,
    2191, 2197, 2202, 2207, 2213, 2218, 2223, 2228,
    2234, 2239, 2244, 2249, 2255, 2260, 2265, 2270,
    2276, 2281, 2286, 2291, 2296, 2302, 2307, 2312,
    2317, 2322, 2328, 2333, 2338, 2343, 2348, 2353,
    2359, 2364, 2369, 2374, 2379, 2384, 2389, 2394,
    2399, 2405, 2410, 2415, 2420, 2425, 2430, 2435,
    2440, 2445, 2450, 2455, 2460, 2465, 2470, 2475,
    2480, 2485, 2490, 2495, 2500, 2505, 2510, 2515,
    2520, 2525, 2530, 2535, 2540, 2545, 2550, 2555,
    2559, 2564, 2569, 2574, 2579, 2584, 2589, 2594,
    2598, 2603, 2608, 2613, 2618, 2623, 2628, 2632,
    2637, 2642, 2647, 2652, 2656, 2661, 2666, 2671,
    2675, 2680, 2685, 2690, 2694, 2699, 2704, 2709,
    2713, 2718, 2723, 2727, 2732, 2737, 2741, 2746,
    2751, 2755, 2760, 2765, 2769, 2774, 2779, 2783,
    2788, 2792, 2797, 2802, 2806, 2811, 2815, 2820,
    2824, 2829, 2833, 2838, 2843, 2847, 2852, 2856,
    2861, 2865, 2870, 2874, 2878, 2883, 2887, 2892,
    2896, 2901, 2905, 2910, 2914, 2918, 2923, 2927,
    2932, 2936, 2940, 2945, 2949, 2953, 2958, 2962,
    2967, 2971, 2975, 2979, 2984, 2988, 2992, 2997,
    3001, 3005, 3009, 3014, 3018, 3022, 3026, 3031,
    3035, 3039, 3043, 3048, 3052, 3056, 3060, 3064,
    3068, 3073, 3077, 3081, 3085, 3089, 3093, 3097,
    3102, 3106, 3110, 3114, 3118, 3122, 3126, 3130,
    3134, 3138, 3142, 3146, 3150, 3154, 3158, 3162,
    3166, 3170, 3174, 3178, 3182, 3186, 3190, 3194,
    3198, 3202, 3206, 3210, 3214, 3217, 3221, 3225,
    3229, 3233, 3237, 3241, 3244, 3248, 3252, 3256,
    3260, 3264, 3267, 3271, 3275, 3279, 3282, 3286,
    3290, 3294, 3297, 3301, 3305, 3309, 3312, 3316,
    3320, 3323, 3327, 3331, 3334, 3338, 3342, 3345,
    3349, 3352, 3356, 3360, 3363, 3367, 3370, 3374,
    3378, 3381, 3385, 3388, 3392, 3395, 3399, 3402,
    3406, 3409, 3413, 3416, 3420, 3423, 3426, 3430,
    3433, 3437, 3440, 3444, 3447, 3450, 3454, 3457,
    3461, 3464, 3467, 3471, 3474, 3477, 3481, 3484,
    3487, 3490, 3494, 3497, 3500, 3504, 3507, 3510,
    3513, 3516, 3520, 3523, 3526, 3529, 3532, 3536,
    3539, 3542, 3545, 3548, 3551, 3555, 3558, 3561,
    3564, 3567, 3570, 3573, 3576, 3579, 3582, 3585,
    3588, 3591, 3594, 3597, 3600, 3603, 3606, 3609,
    3612, 3615, 3618, 3621, 3624, 3627, 3630, 3633,
    3636, 3639, 3642, 3644, 3647, 3650, 3653, 3656,
    3659, 3661, 3664, 3667, 3670, 3673, 3675, 3678,
    3681, 3684, 3686, 3689, 3692, 3695, 3697, 3700,
    3703, 3705, 3708, 3711, 3713, 3716, 3719, 3721,
    3724, 3727, 3729, 3732, 3734, 3737, 3739, 3742,
    3745, 3747, 3750, 3752, 3755, 3757, 3760, 3762,
    3765, 3767, 3770, 3772, 3775, 3777, 3779, 3782,
    3784, 3787, 3789, 3791, 3794, 3796, 3798, 3801,
    3803, 3805, 3808, 3810, 3812, 3815, 3817, 3819,
    3822, 3824, 3826, 3828, 3831, 3833, 3835, 3837,
    3839, 3842, 3844, 3846, 3848, 3850, 3852, 3854,
    3857, 3859, 3861, 3863, 3865, 3867, 3869, 3871,
    3873, 3875, 3877, 3879, 3881, 3883, 3885, 3887,
    3889, 3891, 3893, 3895, 3897, 3899, 3901, 3903,
    3905, 3907, 3909, 3910, 3912, 3914, 3916, 3918,
    3920, 3921, 3923, 3925, 3927, 3929, 3930, 3932,
    3934, 3936, 3937, 3939, 3941, 3943, 3944, 3946,
    3948, 3949, 3951, 3953, 3954, 3956, 3958, 3959,
    3961, 3962, 3964, 3965, 3967, 3969, 3970, 3972,
    3973, 3975, 3976, 3978, 3979, 3981, 3982, 3984,
    3985, 3987, 3988, 3989, 3991, 3992, 3994, 3995,
    3996, 3998, 3999, 4001, 4002, 4003, 4005, 4006,
    4007, 4008, 4010, 4011, 4012, 4014, 4015, 4016,
    4017, 4019, 4020, 4021, 4022, 4023, 4024, 4026,
    4027, 4028, 4029, 4030, 4031, 4032, 4034, 4035,
    4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043,
    4044, 4045, 4046, 4047, 4048, 4049, 4050, 4051,
    4052, 4053, 4053, 4054, 4055, 4056, 4057, 4058,
    4059, 4060, 4060, 4061, 4062, 4063, 4064, 4064,
    4065, 4066, 4067, 4067, 4068, 4069, 4070, 4070,
    4071, 4072, 4072, 4073, 4074, 4074, 4075, 4076,
    4076, 4077, 4077, 4078, 4079, 4079, 4080, 4080,
    4081, 4081, 4082, 4082, 4083, 4083, 4084, 4084,
    4085, 4085, 4086, 4086, 4087, 4087, 4088, 4088,
    4088, 4089, 4089, 4089, 4090, 4090, 4090, 4091,
    4091, 4091, 4092, 4092, 4092, 4092, 4093, 4093,
    4093, 4093, 4094, 4094, 4094, 4094, 4094, 4095,
    4095, 4095, 4095, 4095, 4095, 4095, 4096, 4096,
    4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
    4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
    4096, 4096, 4096, 4095, 4095, 4095, 4095, 4095,
    4095, 4095, 4094, 4094, 4094, 4094, 4094, 4093,
    4093, 4093, 4093, 4092, 4092, 4092, 4092, 4091,
    4091, 4091, 4090, 4090, 4090, 4089, 4089, 4089,
    4088, 4088, 4088, 4087, 4087, 4086, 4086, 4085,
    4085, 4084, 4084, 4083, 4083, 4082, 4082, 4081,
    4081, 4080, 4080, 4079, 4079, 4078, 4077, 4077,
    4076, 4076, 4075, 4074, 4074, 4073, 4072, 4072,
    4071, 4070, 4070, 4069, 4068, 4067, 4067, 4066,
    4065, 4064, 4064, 4063, 4062, 4061, 4060, 4060,
    4059, 4058, 4057, 4056, 4055, 4054, 4053, 4053,
    4052, 4051, 4050, 4049, 4048, 4047, 4046, 4045,
    4044, 4043, 4042, 4041, 4040, 4039, 4038, 4037,
    4036, 4035, 4034, 4032, 4031, 4030, 4029, 4028,
    4027, 4026, 4024, 4023, 4022, 4021, 4020, 4019,
    4017, 4016, 4015, 4014, 4012, 4011, 4010, 4008,
    4007, 4006, 4005, 4003, 4002, 4001, 3999, 3998,
    3996, 3995, 3994, 3992, 3991, 3989, 3988, 3987,
    3985, 3984, 3982, 3981, 3979, 3978, 3976, 3975,
    3973, 3972, 3970, 3969, 3967, 3965, 3964, 3962,
    3961, 3959, 3958, 3956, 3954, 3953, 3951, 3949,
    3948, 3946, 3944, 3943, 3941, 3939, 3937, 3936,
    3934, 3932, 3930, 3929, 3927, 3925, 3923, 3921,
    3920, 3918, 3916, 3914, 3912, 3910, 3909, 3907,
    3905, 3903, 3901, 3899, 3897, 3895, 3893, 3891,
    3889, 3887, 3885, 3883, 3881, 3879, 3877, 3875,
    3873, 3871, 3869, 3867, 3865, 3863, 3861, 3859,
    3857, 3854, 3852, 3850, 3848, 3846, 3844, 3842,
    3839, 3837, 3835, 3833, 3831, 3828, 3826, 3824,
    3822, 3819, 3817, 3815, 3812, 3810, 3808, 3805,
    3803, 3801, 3798, 3796, 3794, 3791, 3789, 3787,
    3784, 3782, 3779, 3777, 3775, 3772, 3770, 3767,
    3765, 3762, 3760, 3757, 3755, 3752, 3750, 3747,
    3745, 3742, 3739, 3737, 3734, 3732, 3729, 3727,
    3724, 3721, 3719, 3716, 3713, 3711, 3708, 3705,
    3703, 3700, 3697, 3695, 3692, 3689, 3686, 3684,
    3681, 3678, 3675, 3673, 3670, 3667, 3664, 3661,
    3659, 3656, 3653, 3650, 3647, 3644, 3642, 3639,
    3636, 3633, 3630, 3627, 3624, 3621, 3618, 3615,
    3612, 3609, 3606, 3603, 3600, 3597, 3594, 3591,
    3588, 3585, 3582, 3579, 3576, 3573, 3570, 3567,
    3564, 3561, 3558, 3555, 3551, 3548, 3545, 3542,
    3539, 3536, 3532, 3529, 3526, 3523, 3520, 3516,
    3513, 3510, 3507, 3504, 3500, 3497, 3494, 3490,
    3487, 3484, 3481, 3477, 3474, 3471, 3467, 3464,
    3461, 3457, 3454, 3450, 3447, 3444, 3440, 3437,
    3433, 3430, 3426, 3423, 3420, 3416, 3413, 3409,
    3406, 3402, 3399, 3395, 3392, 3388, 3385, 3381,
    3378, 3374, 3370, 3367, 3363, 3360, 3356, 3352,
    3349, 3345, 3342, 3338, 3334, 3331, 3327, 3323,
    3320, 3316, 3312, 3309, 3305, 3301, 3297, 3294,
    3290, 3286, 3282, 3279, 3275, 3271, 3267, 3264,
    3260, 3256, 3252, 3248, 3244, 3241, 3237, 3233,
    3229, 3225, 3221, 3217, 3214, 3210, 3206, 3202,
    3198, 3194, 3190, 3186, 3182, 3178, 3174, 3170,
    3166, 3162, 3158, 3154, 3150, 3146, 3142, 3138,
    3134, 3130, 3126, 3122, 3118, 3114, 3110, 3106,
    3102, 3097, 3093, 3089, 3085, 3081, 3077, 3073,
    3068, 3064, 3060, 3056, 3052, 3048, 3043, 3039,
    3035, 3031, 3026, 3022, 3018, 3014, 3009, 3005,
    3001, 2997, 2992, 2988, 2984, 2979, 2975, 2971,
    2967, 2962, 2958, 2953, 2949, 2945, 2940, 2936,
    2932, 2927, 2923, 2918, 2914, 2910, 2905, 2901,
    2896, 2892, 2887, 2883, 2878, 2874, 2870, 2865,
    2861, 2856, 2852, 2847, 2843, 2838, 2833, 2829,
    2824, 2820, 2815, 2811, 2806, 2802, 2797, 2792,
    2788, 2783, 2779, 2774, 2769, 2765, 2760, 2755,
    2751, 2746, 2741, 2737, 2732, 2727, 2723, 2718,
    2713, 2709, 2704, 2699, 2694, 2690, 2685, 2680,
    2675, 2671, 2666, 2661, 2656, 2652, 2647, 2642,
    2637, 2632, 2628, 2623, 2618, 2613, 2608, 2603,
    2598, 2594, 2589, 2584, 2579, 2574, 2569, 2564,
    2559, 2555, 2550, 2545, 2540, 2535, 2530, 2525,
    2520, 2515, 2510, 2505, 2500, 2495, 2490, 2485,
    2480, 2475, 2470, 2465, 2460, 2455, 2450, 2445,
    2440, 2435, 2430, 2425, 2420, 2415, 2410, 2405,
    2399, 2394, 2389, 2384, 2379, 2374, 2369, 2364,
    2359, 2353, 2348, 2343, 2338, 2333, 2328, 2322,
    2317, 2312, 2307, 2302, 2296, 2291, 2286, 2281,
    2276, 2270, 2265, 2260, 2255, 2249, 2244, 2239,
    2234, 2228, 2223, 2218, 2213, 2207, 2202, 2197,
    2191, 2186, 2181, 2175, 2170, 2165, 2159, 2154,
    2149, 2143, 2138, 2133, 2127, 2122, 2117, 2111,
    2106, 2100, 2095, 2090, 2084, 2079, 2073, 2068,
    2062, 2057, 2052, 2046, 2041, 2035, 2030, 2024,
    2019, 2013, 2008, 2002, 1997, 1992, 1986, 1981,
    1975, 1970, 1964, 1958, 1953, 1947, 1942, 1936,
    1931, 1925, 1920, 1914, 1909, 1903, 1898, 1892,
    1886, 1881, 1875, 1870, 1864, 1858, 1853, 1847,
    1842, 1836, 1830, 1825, 1819, 1813, 1808, 1802,
    1797, 1791, 1785, 1780, 1774, 1768, 1763, 1757,
    1751, 1746, 1740, 1734, 1729, 1723, 1717, 1711,
    1706, 1700, 1694, 1689, 1683, 1677, 1671, 1666,
    1660, 1654, 1648, 1643, 1637, 1631, 1625, 1620,
    1614, 1608, 1602, 1596, 1591, 1585, 1579, 1573,
    1567, 1562, 1556, 1550, 1544, 1538, 1533, 1527,
    1521, 1515, 1509, 1503, 1498, 1492, 1486, 1480,
    1474, 1468, 1462, 1457, 1451, 1445, 1439, 1433,
    1427, 1421, 1415, 1409, 1404, 1398, 1392, 1386,
    1380, 1374, 1368, 1362, 1356, 1350, 1344, 1338,
    1332, 1327, 1321, 1315, 1309, 1303, 1297, 1291,
    1285, 1279, 1273, 1267, 1261, 1255, 1249, 1243,
    1237, 1231, 1225, 1219, 1213, 1207, 1201, 1195,
    1189, 1183, 1177, 1171, 1165, 1159, 1153, 1147,
    1141, 1135, 1129, 1123, 1117, 1111, 1105, 1099,
    1092, 1086, 1080, 1074, 1068, 1062, 1056, 1050,
    1044, 1038, 1032, 1026, 1020, 1014, 1007, 1001,
    995, 989, 983, 977, 971, 965, 959, 953,
    946, 940, 934, 928, 922, 916, 910, 904,
    897, 891, 885, 879, 873, 867, 861, 854,
    848, 842, 836, 830, 824, 818, 811, 805,
    799, 793, 787, 781, 774, 768, 762, 756,
    750, 744, 737, 731, 725, 719, 713, 706,
    700, 694, 688, 682, 675, 669, 663, 657,
    651, 644, 638, 632, 626, 620, 613, 607,
    601, 595, 589, 582, 576, 570, 564, 557,
    551, 545, 539, 533, 526, 520, 514, 508,
    501, 495, 489, 483, 476, 470, 464, 458,
    451, 445, 439, 433, 426, 420, 414, 408,
    401, 395, 389, 383, 376, 370, 364, 358,
    351, 345, 339, 333, 326, 320, 314, 308,
    301, 295, 289, 283, 276, 270, 264, 257,
    251, 245, 239, 232, 226, 220, 214, 207,
    201, 195, 188, 182, 176, 170, 163, 157,
    151, 144, 138, 132, 126, 119, 113, 107,
    101, 94, 88, 82, 75, 69, 63, 57,
    50, 44, 38, 31, 25, 19, 13, 6,
    0, -6, -13, -19, -25, -31, -38, -44,
    -50, -57, -63, -69, -75, -82, -88, -94,
    -101, -107, -113, -119, -126, -132, -138, -144,
    -151, -157, -163, -170, -176, -182, -188, -195,
    -201, -207, -214, -220, -226, -232, -239, -245,
    -251, -257, -264, -270, -276, -283, -289, -295,
    -301, -308, -314, -320, -326, -333, -339, -345,
    -351, -358, -364, -370, -376, -383, -389, -395,
    -401, -408, -414, -420, -426, -433, -439, -445,
    -451, -458, -464, -470, -476, -483, -489, -495,
    -501, -508, -514, -520, -526, -533, -539, -545,
    -551, -557, -564, -570, -576, -582, -589, -595,
    -601, -607, -613, -620, -626, -632, -638, -644,
    -651, -657, -663, -669, -675, -682, -688, -694,
    -700, -706, -713, -719, -725, -731, -737, -744,
    -750, -756, -762, -768, -774, -781, -787, -793,
    -799, -805, -811, -818, -824, -830, -836, -842,
    -848, -854, -861, -867, -873, -879, -885, -891,
    -897, -904, -910, -916, -922, -928, -934, -940,
    -946, -953, -959, -965, -971, -977, -983, -989,
    -995, -1001, -1007, -1014, -1020, -1026, -1032, -1038,
    -1044, -1050, -1056, -1062, -1068, -1074, -1080, -1086,
    -1092, -1099, -1105, -1111, -1117, -1123, -1129, -1135,
    -1141, -1147, -1153, -1159, -1165, -1171, -1177, -1183,
    -1189, -1195, -1201, -1207, -1213, -1219, -1225, -1231,
    -1237, -1243, -1249, -1255, -1261, -1267, -1273, -1279,
    -1285, -1291, -1297, -1303, -1309, -1315, -1321, -1327,
    -1332, -1338, -1344, -1350, -1356, -1362, -1368, -1374,
    -1380, -1386, -1392, -1398, -1404, -1409, -1415, -1421,
    -1427, -1433, -1439, -1445, -1451, -1457, -1462, -1468,
    -1474, -1480, -1486, -1492, -1498, -1503, -1509, -1515,
    -1521, -1527, -1533, -1538, -1544, -1550, -1556, -1562,
    -1567, -1573, -1579, -1585, -1591, -1596, -1602, -1608,
    -1614, -1620, -1625, -1631, -1637, -1643, -1648, -1654,
    -1660, -1666, -1671, -1677, -1683, -1689, -1694, -1700,
    -1706, -1711, -1717, -1723, -1729, -1734, -1740, -1746,
    -1751, -1757, -1763, -1768, -1774, -1780, -1785, -1791,
    -1797, -1802, -1808, -1813, -1819, -1825, -1830, -1836,
    -1842, -1847, -1853, -1858, -1864, -1870, -1875, -1881,
    -1886, -1892, -1898, -1903, -1909, -1914, -1920, -1925,
    -1931, -1936, -1942, -1947, -1953, -1958, -1964, -1970,
    -1975, -1981, -1986, -1992, -1997, -2002, -2008, -2013,
    -2019, -2024, -2030, -2035, -2041, -2046, -2052, -2057,
    -2062, -2068, -2073, -2079, -2084, -2090, -2095, -2100,
    -2106, -2111, -2117, -2122, -2127, -2133, -2138, -2143,
    -2149, -2154, -2159, -2165, -2170, -2175, -2181, -2186,
    -2191, -2197, -2202, -2207, -2213, -2218, -2223, -2228,
    -2234, -2239, -2244, -2249, -2255, -2260, -2265, -2270,
    -2276, -2281, -2286, -2291, -2296, -2302, -2307, -2312,
    -2317, -2322, -2328, -2333, -2338, -2343, -2348, -2353,
    -2359, -2364, -2369, -2374, -2379, -2384, -2389, -2394,
    -2399, -2405, -2410, -2415, -2420, -2425, -2430, -2435,
    -2440, -2445, -2450, -2455, -2460, -2465, -2470, -2475,
    -2480, -2485, -2490, -2495, -2500, -2505, -2510, -2515,
    -2520, -2525, -2530, -2535, -2540, -2545, -2550, -2555,
    -2559, -2564, -2569, -2574, -2579, -2584, -2589, -2594,
    -2598, -2603, -2608, -2613, -2618, -2623, -2628, -2632,
    -2637, -2642, -2647, -2652, -2656, -2661, -2666, -2671,
    -2675, -2680, -2685, -2690, -2694, -2699, -2704, -2709,
    -2713, -2718, -2723, -2727, -2732, -2737, -2741, -2746,
    -2751, -2755, -2760, -2765, -2769, -2774, -2779, -2783,
    -2788, -2792, -2797, -2802, -2806, -2811, -2815, -2820,
    -2824, -2829, -2833, -2838, -2843, -2847, -2852, -2856,
    -2861, -2865, -2870, -2874, -2878, -2883, -2887, -2892,
    -2896, -2901, -2905, -2910, -2914, -2918, -2923, -2927,
    -2932, -2936, -2940, -2945, -2949, -2953, -2958, -2962,
    -2967, -2971, -2975, -2979, -2984, -2988, -2992, -2997,
    -3001, -3005, -3009, -3014, -3018, -3022, -3026, -3031,
    -3035, -3039, -3043, -3048, -3052, -3056, -3060, -3064,
    -3068, -3073, -3077, -3081, -3085, -3089, -3093, -3097,
    -3102, -3106, -3110, -3114, -3118, -3122, -3126, -3130,
    -3134, -3138, -3142, -3146, -3150, -3154, -3158, -3162,
    -3166, -3170, -3174, -3178, -3182, -3186, -3190, -3194,
    -3198, -3202, -3206, -3210, -3214, -3217, -3221, -3225,
    -3229, -3233, -3237, -3241, -3244, -3248, -3252, -3256,
    -3260, -3264, -3267, -3271, -3275, -3279, -3282, -3286,
    -3290, -3294, -3297, -3301, -3305, -3309, -3312, -3316,
    -3320, -3323, -3327, -3331, -3334, -3338, -3342, -3345,
    -3349, -3352, -3356, -3360, -3363, -3367, -3370, -3374,
    -3378, -3381, -3385, -3388, -3392, -3395, -3399, -3402,
    -3406, -3409, -3413, -3416, -3420, -3423, -3426, -3430,
    -3433, -3437, -3440, -3444, -3447, -3450, -3454, -3457,
    -3461, -3464, -3467, -3471, -3474, -3477, -3481, -3484,
    -3487, -3490, -3494, -3497, -3500, -3504, -3507, -3510,
    -3513, -3516, -3520, -3523, -3526, -3529, -3532, -3536,
    -3539, -3542, -3545, -3548, -3551, -3555, -3558, -3561,
    -3564, -3567, -3570, -3573, -3576, -3579, -3582, -3585,
    -3588, -3591, -3594, -3597, -3600, -3603, -3606, -3609,
    -3612, -3615, -3618, -3621, -3624, -3627, -3630, -3633,
    -3636, -3639, -3642, -3644, -3647, -3650, -3653, -3656,
    -3659, -3661, -3664, -3667, -3670, -3673, -3675, -3678,
    -3681, -3684, -3686, -3689, -3692, -3695, -3697, -3700,
    -3703, -3705, -3708, -3711, -3713, -3716, -3719, -3721,
    -3724, -3727, -3729, -3732, -3734, -3737, -3739, -3742,
    -3745, -3747, -3750, -3752, -3755, -3757, -3760, -3762,
    -3765, -3767, -3770, -3772, -3775, -3777, -3779, -3782,
    -3784, -3787, -3789, -3791, -3794, -3796, -3798, -3801,
    -3803, -3805, -3808, -3810, -3812, -3815, -3817, -3819,
    -3822, -3824, -3826, -3828, -3831, -3833, -3835, -3837,
    -3839, -3842, -3844, -3846, -3848, -3850, -3852, -3854,
    -3857, -3859, -3861, -3863, -3865, -3867, -3869, -3871,
    -3873, -3875, -3877, -3879, -3881, -3883, -3885, -3887,
    -3889, -3891, -3893, -3895, -3897, -3899, -3901, -3903,
    -3905, -3907, -3909, -3910, -3912, -3914, -3916, -3918,
    -3920, -3921, -3923, -3925, -3927, -3929, -3930, -3932,
    -3934, -3936, -3937, -3939, -3941, -3943, -3944, -3946,
    -3948, -3949, -3951, -3953, -3954, -3956, -3958, -3959,
    -3961, -3962, -3964, -3965, -3967, -3969, -3970, -3972,
    -3973, -3975, -3976, -3978, -3979, -3981, -3982, -3984,
    -3985, -3987, -3988, -3989, -3991, -3992, -3994, -3995,
    -3996, -3998, -3999, -4001, -4002, -4003, -4005, -4006,
    -4007, -4008, -4010, -4011, -4012, -4014, -4015, -4016,
    -4017, -4019, -4020, -4021, -4022, -4023, -4024, -4026,
    -4027, -4028, -4029, -4030, -4031, -4032, -4034, -4035,
    -4036, -4037, -4038, -4039, -4040, -4041, -4042, -4043,
    -4044, -4045, -4046, -4047, -4048, -4049, -4050, -4051,
    -4052, -4053, -4053, -4054, -4055, -4056, -4057, -4058,
    -4059, -4060, -4060, -4061, -4062, -4063, -4064, -4064,
    -4065, -4066, -4067, -4067, -4068, -4069, -4070, -4070,
    -4071, -4072, -4072, -4073, -4074, -4074, -4075, -4076,
    -4076, -4077, -4077, -4078, -4079, -4079, -4080, -4080,
    -4081, -4081, -4082, -4082, -4083, -4083, -4084, -4084,
    -4085, -4085, -4086, -4086, -4087, -4087, -4088, -4088,
    -4088, -4089, -4089, -4089, -4090, -4090, -4090, -4091,
    -4091, -4091, -4092, -4092, -4092, -4092, -4093, -4093,
    -4093, -4093, -4094, -4094, -4094, -4094, -4094, -4095,
    -4095, -4095, -4095, -4095, -4095, -4095, -4096, -4096,
    -4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096,
    -4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096,
    -4096, -4096, -4096, -4095, -4095, -4095, -4095, -4095,
    -4095, -4095, -4094, -4094, -4094, -4094, -4094, -4093,
    -4093, -4093, -4093, -4092, -4092, -4092, -4092, -4091,
    -4091, -4091, -4090, -4090, -4090, -4089, -4089, -4089,
    -4088, -4088, -4088, -4087, -4087, -4086, -4086, -4085,
    -4085, -4084, -4084, -4083, -4083, -4082, -4082, -4081,
    -4081, -4080, -4080, -4079, -4079, -4078, -4077, -4077,
    -4076, -4076, -4075, -4074, -4074, -4073, -4072, -4072,
    -4071, -4070, -4070, -4069, -4068, -4067, -4067, -4066,
    -4065, -4064, -4064, -4063, -4062, -4061, -4060, -4060,
    -4059, -4058, -4057, -4056, -4055, -4054, -4053, -4053,
    -4052, -4051, -4050, -4049, -4048, -4047, -4046, -4045,
    -4044, -4043, -4042, -4041, -4040, -4039, -4038, -4037,
    -4036, -4035, -4034, -4032, -4031, -4030, -4029, -4028,
    -4027, -4026, -4024, -4023, -4022, -4021, -4020, -4019,
    -4017, -4016, -4015, -4014, -4012, -4011, -4010, -4008,
    -4007, -4006, -4005, -4003, -4002, -4001, -3999, -3998,
    -3996, -3995, -3994, -3992, -3991, -3989, -3988, -3987,
    -3985, -3984, -3982, -3981, -3979, -3978, -3976, -3975,
    -3973, -3972, -3970, -3969, -3967, -3965, -3964, -3962,
    -3961, -3959, -3958, -3956, -3954, -3953, -3951, -3949,
    -3948, -3946, -3944, -3943, -3941, -3939, -3937, -3936,
    -3934, -3932, -3930, -3929, -3927, -3925, -3923, -3921,
    -3920, -3918, -3916, -3914, -3912, -3910, -3909, -3907,
    -3905, -3903, -3901, -3899, -3897, -3895, -3893, -3891,
    -3889, -3887, -3885, -3883, -3881, -3879, -3877, -3875,
    -3873, -3871, -3869, -3867, -3865, -3863, -3861, -3859,
    -3857, -3854, -3852, -3850, -3848, -3846, -3844, -3842,
    -3839, -3837, -3835, -3833, -3831, -3828, -3826, -3824,
    -3822, -3819, -3817, -3815, -3812, -3810, -3808, -3805,
    -3803, -3801, -3798, -3796, -3794, -3791, -3789, -3787,
    -3784, -3782, -3779, -3777, -3775, -3772, -3770, -3767,
    -3765, -3762, -3760, -3757, -3755, -3752, -3750, -3747,
    -3745, -3742, -3739, -3737, -3734, -3732, -3729, -3727,
    -3724, -3721, -3719, -3716, -3713, -3711, -3708, -3705,
    -3703, -3700, -3697, -3695, -3692, -3689, -3686, -3684,
    -3681, -3678, -3675, -3673, -3670, -3667, -3664, -3661,
    -3659, -3656, -3653, -3650, -3647, -3644, -3642, -3639,
    -3636, -3633, -3630, -3627, -3624, -3621, -3618, -3615,
    -3612, -3609, -3606, -3603, -3600, -3597, -3594, -3591,
    -3588, -3585, -3582, -3579, -3576, -3573, -3570, -3567,
    -3564, -3561, -3558, -3555, -3551, -3548, -3545, -3542,
    -3539, -3536, -3532, -3529, -3526, -3523, -3520, -3516,
    -3513, -3510, -3507, -3504, -3500, -3497, -3494, -3490,
    -3487, -3484, -3481, -3477, -3474, -3471, -3467, -3464,
    -3461, -3457, -3454, -3450, -3447, -3444, -3440, -3437,
    -3433, -3430, -3426, -3423, -3420, -3416, -3413, -3409,
    -3406, -3402, -3399, -3395, -3392, -3388, -3385, -3381,
    -3378, -3374, -3370, -3367, -3363, -3360, -3356, -3352,
    -3349, -3345, -3342, -3338, -3334, -3331, -3327, -3323,
    -3320, -3316, -3312, -3309, -3305, -3301, -3297, -3294,
    -3290, -3286, -3282, -3279, -3275, -3271, -3267, -3264,
    -3260, -3256, -3252, -3248, -3244, -3241, -3237, -3233,
    -3229, -3225, -3221, -3217, -3214, -3210, -3206, -3202,
    -3198, -3194, -3190, -3186, -3182, -3178, -3174, -3170,
    -3166, -3162, -3158, -3154, -3150, -3146, -3142, -3138,
    -3134, -3130, -3126, -3122, -3118, -3114, -3110, -3106,
    -3102, -3097, -3093, -3089, -3085, -3081, -3077, -3073,
    -3068, -3064, -3060, -3056, -3052, -3048, -3043, -3039,
    -3035, -3031, -3026, -3022, -3018, -3014, -3009, -3005,
    -3001, -2997, -2992, -2988, -2984, -2979, -2975, -2971,
    -2967, -2962, -2958, -2953, -2949, -2945, -2940, -2936,
    -2932, -2927, -2923, -2918, -2914, -2910, -2905, -2901,
    -2896, -2892, -2887, -2883, -2878, -2874, -2870, -2865,
    -2861, -2856, -2852, -2847, -2843, -2838, -2833, -2829,
    -2824, -2820, -2815, -2811, -2806, -2802, -2797, -2792,
    -2788, -2783, -2779, -2774, -2769, -2765, -2760, -2755,
    -2751, -2746, -2741, -2737, -2732, -2727, -2723, -2718,
    -2713, -2709, -2704, -2699, -2694, -2690, -2685, -2680,
    -2675, -2671, -2666, -2661, -2656, -2652, -2647, -2642,
    -2637, -2632, -2628, -2623, -2618, -2613, -2608, -2603,
    -2598, -2594, -2589, -2584, -2579, -2574, -2569, -2564,
    -2559, -2555, -2550, -2545, -2540, -2535, -2530, -2525,
    -2520, -2515, -2510, -2505, -2500, -2495, -2490, -2485,
    -2480, -2475, -2470, -2465, -2460, -2455, -2450, -2445,
    -2440, -2435, -2430, -2425, -2420, -2415, -2410, -2405,
    -2399, -2394, -2389, -2384, -2379, -2374, -2369, -2364,
    -2359, -2353, -2348, -2343, -2338, -2333, -2328, -2322,
    -2317, -2312, -2307, -2302, -2296, -2291, -2286, -2281,
    -2276, -2270, -2265, -2260, -2255, -2249, -2244, -2239,
    -2234, -2228, -2223, -2218, -2213, -2207, -2202, -2197,
    -2191, -2186, -2181, -2175, -2170, -2165, -2159, -2154,
    -2149, -2143, -2138, -2133, -2127, -2122, -2117, -2111,
    -2106, -2100, -2095, -2090, -2084, -2079, -2073, -2068,
    -2062, -2057, -2052, -2046, -2041, -2035, -2030, -2024,
    -2019, -2013, -2008, -2002, -1997, -1992, -1986, -1981,
    -1975, -1970, -1964, -1958, -1953, -1947, -1942, -1936,
    -1931, -1925, -1920, -1914, -1909, -1903, -1898, -1892,
    -1886, -1881, -1875, -1870, -1864, -1858, -1853, -1847,
    -1842, -1836, -1830, -1825, -1819, -1813, -1808, -1802,
    -1797, -1791, -1785, -1780, -1774, -1768, -1763, -1757,
    -1751, -1746, -1740, -1734, -1729, -1723, -1717, -1711,
    -1706, -1700, -1694, -1689, -1683, -1677, -1671, -1666,
    -1660, -1654, -1648, -1643, -1637, -1631, -1625, -1620,
    -1614, -1608, -1602, -1596, -1591, -1585, -1579, -1573,
    -1567, -1562, -1556, -1550, -1544, -1538, -1533, -1527,
    -1521, -1515, -1509, -1503, -1498, -1492, -1486, -1480,
    -1474, -1468, -1462, -1457, -1451, -1445, -1439, -1433,
    -1427, -1421, -1415, -1409, -1404, -1398, -1392, -1386,
    -1380, -1374, -1368, -1362, -1356, -1350, -1344, -1338,
    -1332, -1327, -1321, -1315, -1309, -1303, -1297, -1291,
    -1285, -1279, -1273, -1267, -1261, -1255, -1249, -1243,
    -1237, -1231, -1225, -1219, -1213, -1207, -1201, -1195,
    -1189, -1183, -1177, -1171, -1165, -1159, -1153, -1147,
    -1141, -1135, -1129, -1123, -1117, -1111, -1105, -1099,
    -1092, -1086, -1080, -1074, -1068, -1062, -1056, -1050,
    -1044, -1038, -1032, -1026, -1020, -1014, -1007, -1001,
    -995, -989, -983, -977, -971, -965, -959, -953,
    -946, -940, -934, -928, -922, -916, -910, -904,
    -897, -891, -885, -879, -873, -867, -861, -854,
    -848, -842, -836, -830, -824, -818, -811, -805,
    -799, -793, -787, -781, -774, -768, -762, -756,
    -750, -744, -737, -731, -725, -719, -713, -706,
    -700, -694, -688, -682, -675, -669, -663, -657,
    -651, -644, -638, -632, -626, -620, -613, -607,
    -601, -595, -589, -582, -576, -570, -564, -557,
    -551, -545, -539, -533, -526, -520, -514, -508,
    -501, -495, -489, -483, -476, -470, -464, -458,
    -451, -445, -439, -433, -426, -420, -414, -408,
    -401, -395, -389, -383, -376, -370, -364, -358,
    -351, -345, -339, -333, -326, -320, -314, -308,
    -301, -295, -289, -283, -276, -270, -264, -257,
    -251, -245, -239, -232, -226, -220, -214, -207,
    -201, -195, -188, -182, -176, -170, -163, -157,
    -151, -144, -138, -132, -126, -119, -113, -107,
    -101, -94, -88, -82, -75, -69, -63, -57,
    -50, -44, -38, -31, -25, -19, -13, -6
};

static const std::array<u8, 208> tableOfBodyParts
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x02, 0x00, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x02, 0x03, 0x00, 0x00, 0x00,
	0x04, 0x00, 0x04, 0x03, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x04, 0x05, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x06, 0x02, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00,
	0x05, 0x00, 0x08, 0x07, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x09, 0x02, 0x09, 0x00, 0x00, 0x00,
	0x04, 0x00, 0x0A, 0x09, 0x0A, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0B, 0x0A, 0x0B, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x0C, 0x02, 0x0C, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0D, 0x0C, 0x0D, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x0E, 0x02, 0x0E, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0F, 0x0E, 0x0F, 0x00, 0x00, 0x00,
	0x02, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x03, 0x00, 0x11, 0x10, 0x11, 0x00, 0x00, 0x00,
	0x04, 0x00, 0x12, 0x11, 0x12, 0x00, 0x00, 0x00, 0x05, 0x00, 0x13, 0x12, 0x13, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x14, 0x10, 0x14, 0x00, 0x00, 0x00, 0x04, 0x00, 0x15, 0x14, 0x15, 0x00, 0x00, 0x00,
	0x05, 0x00, 0x16, 0x15, 0x16, 0x00, 0x00, 0x00, 0x03, 0x00, 0x17, 0x10, 0x17, 0x00, 0x00, 0x00,
	0x04, 0x00, 0x18, 0x17, 0x18, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

struct Body
{
	std::array<Model::Minion::Compressed, Model::Minion::nbParts> compressed;
	std::array<Model::Minion::Decompressed, Model::Minion::nbParts> decompressed;
};

namespace Merge
{
	void Model(Buffer* mainModel,
		const Model::Minion::Animation::UnpackedOffsetSize& animations,
		const std::vector<ModelInterp>& models)
	{
		if (models.empty() || !mainModel)
		{
			throw std::runtime_error{ "Invalid models number" };
		}

		const auto nbModels{ models.size() + 1 };

		std::vector<Body> body(nbModels);
		std::vector<RawTypeBrowser> rawModels{ { mainModel->data(), mainModel->size() } };

		for (std::size_t i{}; i < nbModels - 1; ++i)
		{
			rawModels.emplace_back(const_cast<Buffer::value_type*>(models[i].raw.data()), models[i].raw.size());
		}

		for (std::size_t i{}; i < nbModels; ++i)
		{
			rawModels[i] = Model::Minion::begin + Model::Minion::headerSize;
			for (u32 j{}; j < Model::Minion::nbParts; ++j)
			{
				const auto types{ rawModels[i].read<std::array<s32, Model::TYPE_COUNT>>() };
				const auto totalTypes{ std::accumulate(types.begin(), types.end(), 0) };
				rawModels[i] += sizeof(s32) * Model::TYPE_COUNT;

				for (s32 k{}; k < totalTypes; ++k)
				{
					const auto _3_2{ rawModels[i].read<u8>(3) };
					rawModels[i] += 4;

					switch (rawModels[i].read<u8>(-4))
					{
					case Model::TYPE_THREE:
					{
						body[i].compressed[j].three.emplace_back(rawModels[i].read<Model::CompressedThree>());
						body[i].decompressed[j].three.emplace_back(body[i].compressed[j].three.back(), _3_2);
						rawModels[i] += sizeof(Model::CompressedThree);
						break;
					}
					case Model::TYPE_FOUR:
					{
						body[i].compressed[j].four.emplace_back(rawModels[i].read<Model::CompressedFour>());
						body[i].decompressed[j].four.emplace_back(body[i].compressed[j].four.back(), _3_2);
						rawModels[i] += sizeof(Model::CompressedFour);
						break;
					}
					case Model::TYPE_SHADOW:
					{
						body[i].compressed[j].shadow.emplace_back(rawModels[i].read<Model::CompressedShadow>());
						body[i].decompressed[j].shadow.emplace_back(body[i].compressed[j].shadow.back(), _3_2);
						rawModels[i] += sizeof(Model::CompressedShadow);
						break;
					}
					case Model::TYPE_SEVEN:
					{
						body[i].compressed[j].seven.emplace_back(rawModels[i].read<Model::CompressedSeven>());
						body[i].decompressed[j].seven.emplace_back(body[i].compressed[j].seven.back(), _3_2);
						rawModels[i] += sizeof(Model::CompressedSeven);
						break;
					}
					case Model::TYPE_NINE:
					{
						const auto nbPacked{ rawModels[i].read<s32>() };
						rawModels[i] += 8;

						body[i].compressed[j].nine.emplace_back();
						body[i].decompressed[j].nine.emplace_back();

						const auto
							lastCompressed{ body[i].compressed[j].nine.size() - 1 },
							lastDecompressed{ body[i].decompressed[j].nine.size() - 1 };

						body[i].compressed[j].nine[lastCompressed].reserve(nbPacked);
						body[i].decompressed[j].nine[lastDecompressed].reserve(nbPacked);

						for (s32 l{}; l < nbPacked; ++l)
						{
							body[i].compressed[j].nine[lastCompressed].emplace_back(rawModels[i].read<Model::CompressedNine>());
							body[i].decompressed[j].nine[lastDecompressed].emplace_back(body[i].compressed[j].nine[lastCompressed][l], _3_2);
							rawModels[i] += sizeof(Model::CompressedNine);
						}
						break;
					}
					default: 
						throw std::runtime_error{ "Invalid Model Type" };
					}
				}
			}
		}

		for (std::size_t i{ 1 }; i < nbModels; ++i)
		{
			const s16 interpolation{ models[i - 1].interpolation % (Merge::maxInterpolation + 1) };

			for (u32 j{}; j < Model::Minion::nbParts; ++j)
			{
                if (body[0].decompressed[j].three.size() != body[i].decompressed[j].three.size() ||
                    body[0].decompressed[j].four.size() != body[i].decompressed[j].four.size() || 
                    body[0].decompressed[j].shadow.size() != body[i].decompressed[j].shadow.size() || 
                    body[0].decompressed[j].seven.size() != body[i].decompressed[j].seven.size() || 
                    body[0].decompressed[j].nine.size() != body[i].decompressed[j].nine.size())
                {
                    throw std::runtime_error{ "Incompatible models" };
                }

                auto vec3Interpolation = [interpolation](u16* a, u16* b, s32 iteration)
                {
                    for (s32 i{}; i < iteration; ++i)
                    {
                        const auto c{ i * 4 };

                        b[0 + c] -= a[0 + c];
                        b[1 + c] -= a[1 + c];
                        b[2 + c] -= a[2 + c];
                        a[0 + c] += libgte::mult(b[0 + c], interpolation);
                        a[1 + c] += libgte::mult(b[1 + c], interpolation);
                        a[2 + c] += libgte::mult(b[2 + c], interpolation);
                    }
                };

				for (std::size_t k{}; k < body[0].decompressed[j].three.size(); ++k)
				{
					vec3Interpolation(&body[0].decompressed[j].three[k]._18, &body[i].decompressed[j].three[k]._18, 6);
				}

				for (std::size_t k{}; k < body[0].decompressed[j].four.size(); ++k)
				{
					vec3Interpolation(&body[0].decompressed[j].four[k]._4, &body[i].decompressed[j].four[k]._4, 5);
				}

				for (std::size_t k{}; k < body[0].decompressed[j].shadow.size(); ++k)
				{
					vec3Interpolation(&body[0].decompressed[j].shadow[k]._10, &body[i].decompressed[j].shadow[k]._10, 5);
				}

				for (std::size_t k{}; k < body[0].decompressed[j].seven.size(); ++k)
				{
					vec3Interpolation(&body[0].decompressed[j].seven[k]._1C, &body[i].decompressed[j].seven[k]._1C, 8);
				}

				for (std::size_t k{}; k < body[0].decompressed[j].nine.size(); ++k)
				{
					for (std::size_t l{}; l < body[0].decompressed[j].nine[k].size(); ++l)
					{
                        if (body[0].decompressed[j].nine[k].size() != body[i].decompressed[j].nine[k].size())
                        {
                            throw std::runtime_error{ "Incompatible models" };
                        }

						auto packedInterpolation = [interpolation](u16* a, u16* b)
						{
							for (s32 i{}; i < 4; ++i)
							{
								const auto c{ i * 2 };

								b[0 + c] -= a[0 + c];
								b[1 + c] -= a[1 + c];
								a[0 + c] += libgte::mult(b[0 + c], interpolation);
								a[1 + c] += libgte::mult(b[1 + c], interpolation);
							}
						};

						packedInterpolation(&body[0].decompressed[j].nine[k][l]._4, &body[i].decompressed[j].nine[k][l]._4);
					}
				}
			}
		}	

		for (u32 i{}; i < Model::Minion::nbParts; ++i)
		{
			for (std::size_t j{}; j < body[0].compressed[i].three.size(); ++j)
			{
				body[0].compressed[i].three[j].recompress(body[0].decompressed[i].three[j]);
			}

			for (std::size_t j{}; j < body[0].compressed[i].four.size(); ++j)
			{
				body[0].compressed[i].four[j].recompress(body[0].decompressed[i].four[j]);
			}

			for (std::size_t j{}; j < body[0].compressed[i].shadow.size(); ++j)
			{
				body[0].compressed[i].shadow[j].recompress(body[0].decompressed[i].shadow[j]);
			}

			for (std::size_t j{}; j < body[0].compressed[i].seven.size(); ++j)
			{
				body[0].compressed[i].seven[j].recompress(body[0].decompressed[i].seven[j]);
			}

			for (std::size_t j{}; j < body[0].compressed[i].nine.size(); ++j)
			{
				for (std::size_t k{}; k < body[0].compressed[i].nine[j].size(); ++k)
				{
					body[0].compressed[i].nine[j][k].recompress(body[0].decompressed[i].nine[j][k]);
				}
			}
		}

		rawModels[0] = Model::Minion::begin + Model::Minion::headerSize;
		for (u32 i{}; i < Model::Minion::nbParts; ++i)
		{
			const auto types{ rawModels[0].read<std::array<s32, Model::TYPE_COUNT>>() };
			const auto totalTypes{ std::accumulate(types.begin(), types.end(), 0) };
			rawModels[0] += sizeof(s32) * Model::TYPE_COUNT;

			for (s32 j{}; j < totalTypes; ++j)
			{
				rawModels[0] += 4;

				switch (rawModels[0].read<u8>(-4))
				{
				case Model::TYPE_THREE:
				{
					rawModels[0].write(body[0].compressed[i].three[0]);
					body[0].compressed[i].three.erase(body[0].compressed[i].three.begin());
					rawModels[0] += sizeof(Model::CompressedThree);
					break;
				}
				case Model::TYPE_FOUR:
				{
					rawModels[0].write(body[0].compressed[i].four[0]);
					body[0].compressed[i].four.erase(body[0].compressed[i].four.begin());
					rawModels[0] += sizeof(Model::CompressedFour);
					break;
				}
				case Model::TYPE_SHADOW:
				{
					rawModels[0].write(body[0].compressed[i].shadow[0]);
					body[0].compressed[i].shadow.erase(body[0].compressed[i].shadow.begin());
					rawModels[i] += sizeof(Model::CompressedShadow);
					break;
				}
				case Model::TYPE_SEVEN:
				{
					rawModels[0].write(body[0].compressed[i].seven[0]);
					body[0].compressed[i].seven.erase(body[0].compressed[i].seven.begin());
					rawModels[0] += sizeof(Model::CompressedSeven);
					break;
				}
				case Model::TYPE_NINE:
				{
					const auto nbPacked{ rawModels[0].read<s32>() };
					rawModels[0] += 8;

					for (s32 k{}; k < nbPacked; ++k)
					{
						rawModels[0].write(body[0].compressed[i].nine[0][k]);
						rawModels[0] += sizeof(Model::CompressedNine);
					}

					body[0].compressed[i].nine.erase(body[0].compressed[i].nine.begin());
					break;
				}
				default: 
					throw std::runtime_error{ "Invalid Model Type" };
				}
			}
		}

		// Body parts position
		rawModels[0] = Model::Minion::Animation::begin;
		const auto packedBegin{ rawModels[0].read<std::array<u32, Model::Minion::Animation::nbPacked>>(4) };
		auto pos0{ rawModels[0].read<std::array<s16, 72>>(0x38) };

		for (std::size_t i{ 1 }; i < nbModels; ++i)
		{
			const s16 interpolation{ models[i - 1].interpolation % (Merge::maxInterpolation + 1) };

			rawModels[i] = Model::Minion::Animation::begin;
			const auto posI{ rawModels[i].read<std::array<s16, 72>>(0x38) };	

			for (s32 j{}; j < 72; ++j)
			{
				pos0[j] += libgte::mult(posI[j] - pos0[j], interpolation);
			}
		}

		for (u32 i{}; i < Model::Minion::Animation::nbPacked; ++i)
		{
			rawModels[0] = Model::Minion::Animation::begin + packedBegin[i];
			rawModels[0].write(pos0, rawModels[0].read<u8>(3) & 0x80 ? 0x18 : 0x14);
		}

		for (u32 i{}; i < Model::Minion::Animation::nbUnpacked; ++i)
		{
			rawModels[0] = animations.offset(i);
			rawModels[0].write(pos0, rawModels[0].read<u8>(3) & 0x80 ? 0x18 : 0x14);
		}

		// XYZ Growth size
		for (std::size_t i{ 1 }; i < nbModels; ++i)
		{
			const s16 
				interpolation{ models[i - 1].interpolation % (Merge::maxInterpolation + 1) },
				interpolation0{ Merge::maxInterpolation - interpolation };

			rawModels[0] = 0xC;
			rawModels[i] = 0xC;
			rawModels[0] = rawModels[0].read<u32>() + 0xC;
			rawModels[i] = rawModels[i].read<u32>() + 0xC;		

			for (s32 j{}; j < 5; ++j)
			{
				auto xyz0{ rawModels[0].read<std::array<s32, 3>>(0x18) };
				const auto xyz{ rawModels[i].read<std::array<s32, 3>>(0x18) };

				for (s32 k{}; k < 3; ++k)
				{
					xyz0[k] = libgte::mult(static_cast<s16>(xyz0[k]), interpolation0) + 
						libgte::mult(static_cast<s16>(xyz[k]), interpolation);
				}

				rawModels[0].write(xyz0, 0x18);
				rawModels[0] += 0x160;
				rawModels[i] += 0x160;
			}
		}

		// Global position
		for (std::size_t i{ 1 }; i < nbModels; ++i)
		{
			const s16 
				interpolation{ models[i - 1].interpolation % (Merge::maxInterpolation + 1) },
				interpolation0{ Merge::maxInterpolation - interpolation };

			static constexpr auto fInt{ 0x39800000u };

			const auto 			
				fInterpolation{ static_cast<float>(interpolation) * *(float*)&fInt },
				fInterpolation0{ static_cast<float>(interpolation0) * *(float*)&fInt };

			rawModels[0] = 8;
			rawModels[i] = 8;
			rawModels[0] = rawModels[0].read<u32>() + 4;
			rawModels[i] = rawModels[i].read<u32>() + 4;

			for (s32 j{}; j < 0x2B; ++j)
			{
				auto xyz0{ rawModels[0].read<std::array<s16, 3>>(4) };
				const auto xyz{ rawModels[i].read<std::array<s16, 3>>(4) };

				for (std::size_t k{}; k < 3; ++k)
				{
					const float fCoord
					{
						static_cast<float>(xyz0[k]) * fInterpolation0 + 
						static_cast<float>(xyz[k]) * fInterpolation
					};

					xyz0[k] = static_cast<s16>(fCoord);
				}

				rawModels[0].write(xyz0, 4);
				rawModels[0] += 0xC;
				rawModels[i] += 0xC;
			}
		}

		// Y Coordinate
		std::array<libgte::MATRIX, Model::Minion::nbParts> matrixs{};
		std::array<libgte::VECTOR, Model::Minion::nbParts> vectors{};
		libgte::SVECTOR sVector1{}, sVector2{};

		Buffer bufferScratchpad(0x400);
		RawTypeBrowser scratchpad{ bufferScratchpad.data(), bufferScratchpad.size() };

		for (s32 i{}; i < 9; ++i)
		{
			scratchpad.write(i % 4 == 0 ? s16(0x1000) : s16(0), 0x60 + i * 2);
		}

		for (u32 i{}; i < Model::Minion::nbParts; ++i)
		{			
			const auto desiredVec{ tableOfBodyParts[i * 8 + 2] };

			if (!desiredVec)
			{
				sVector1.vx = 0;
				sVector2.vx = 0;
			}
			else
			{
				const auto vecOffset{ (desiredVec + 2) * 6 };

				rawModels[0] = 0x128D2;
				sVector2.vx = rawModels[0].read<s16>(vecOffset);
				sVector1.vx = rawModels[0].read<s16>(vecOffset + 0x130);			
			}

			rawModels[0] = 0x12A0E;

			const auto 
				vecY{ rawModels[0].read<u16>(2 + i * 6) },
				vecZ{ rawModels[0].read<u16>(4 + i * 6) };

			const auto 
				x_0{ tableOfRates[static_cast<u16>(sVector1.vx) & 0xFFF] },
				x_400{ tableOfRates[(static_cast<u16>(sVector1.vx) + 0x400) & 0xFFF] },
				y_0{ tableOfRates[vecY & 0xFFF] },
				y_400{ tableOfRates[(vecY + 0x400) & 0xFFF] },
				z_0{ tableOfRates[vecZ & 0xFFF] },
				z_400{ tableOfRates[(vecZ + 0x400) & 0xFFF] },
				x2_0{ tableOfRates[static_cast<u16>(sVector2.vx) & 0xFFF] },
				x2_400{ tableOfRates[(static_cast<u16>(sVector2.vx) + 0x400) & 0xFFF] };

            libgte::MATRIX scratchMatrix;

			scratchMatrix.m[0][0] = (z_400 * y_400) >> 0xC; 
			scratchMatrix.m[0][1] = ((((z_400 * y_0) >> 0xC) * x_0) >> 0xC) - ((z_0 * x_400) >> 0xC);
			scratchMatrix.m[0][2] = ((x_0 * z_0) >> 0xC) + ((((z_400 * y_0) >> 0xC) * x_400) >> 0xC);
			scratchMatrix.m[1][0] = ((((y_400 * z_0) >> 0xC) * x2_400) >> 0xC) + ((y_0 * x2_0) >> 0xC);
			scratchMatrix.m[1][1] = (((((z_400 * x_400) >> 0xC) + ((((z_0 * y_0) >> 0xC) * x_0) >> 0xC)) * x2_400) >> 0xC) - ((((z_400 * y_0) >> 0xC) * x2_0) >> 0xC);
			scratchMatrix.m[1][2] = (((((((z_0 * y_0) >> 0xC) * x_400) >> 0xC) - ((z_400 * x_0) >> 0xC)) * x2_400) >> 0xC) - ((((x_400 * y_400) >> 0xC) * x2_0) >> 0xC);
			scratchMatrix.m[2][0] = ((((y_400 * z_0) >> 0xC) * x2_0) >> 0xC) - ((y_0 * x2_400) >> 0xC);
			scratchMatrix.m[2][1] = (((((z_400 * x_400) >> 0xC) + ((((z_0 * y_0) >> 0xC) * x_0) >> 0xC)) * x2_0) >> 0xC) + ((((x_0 * y_400) >> 0xC) * x2_400) >> 0xC);
			scratchMatrix.m[2][2] = (((((((z_0 * y_0) >> 0xC) * x_400) >> 0xC) - ((z_400 * x_0) >> 0xC)) * x2_0) >> 0xC) + ((((x_400 * y_400) >> 0xC) * x2_400) >> 0xC);
			scratchMatrix.t[0] = 0;
			scratchMatrix.t[1] = 0;
			scratchMatrix.t[2] = 0;

			const auto shiftOffset{ sizeof(libgte::MATRIX) * (tableOfBodyParts[i * 8] + 2) };
			scratchpad.write(scratchMatrix, 0x40 + shiftOffset);

			scratchMatrix = scratchpad.read<libgte::MATRIX>(0x20 + shiftOffset);
			for (s32 j{}; j < 3; ++j)
			{			
				sVector1.vx = scratchpad.read<s16>(0x40 + shiftOffset + j * 2);
				sVector1.vy = scratchpad.read<s16>(0x46 + shiftOffset + j * 2);
				sVector1.vz = scratchpad.read<s16>(0x4C + shiftOffset + j * 2);

				libgte::ApplyMatrixSV(&scratchMatrix, &sVector1, &sVector2);

				scratchpad.write(sVector2.vx, 0x40 + shiftOffset + j * 2);
				scratchpad.write(sVector2.vy, 0x46 + shiftOffset + j * 2);
				scratchpad.write(sVector2.vz, 0x4C + shiftOffset + j * 2);
			}

			rawModels[0] = 0x1296C;
			sVector1.vx = rawModels[0].read<s16>(i * 6);
			sVector1.vy = rawModels[0].read<s16>(2 + i * 6);
			sVector1.vz = rawModels[0].read<s16>(4 + i * 6);

			libgte::ApplyMatrix(&scratchMatrix, &sVector1, &vectors[i]);

			vectors[i].vx = vectors[i].vx + scratchpad.read<s32>(0x34 + shiftOffset);
			vectors[i].vy = vectors[i].vy + scratchpad.read<s32>(0x38 + shiftOffset);
			vectors[i].vz = vectors[i].vz + scratchpad.read<s32>(0x3C + shiftOffset);

			scratchpad.write(vectors[i].vx, 0x54 + shiftOffset);
			scratchpad.write(vectors[i].vy, 0x58 + shiftOffset);
			scratchpad.write(vectors[i].vz, 0x5C + shiftOffset);
			matrixs[i] = scratchpad.read<libgte::MATRIX>(0x40 + shiftOffset);
		}

		rawModels[0] = 0;
		rawModels[0] = rawModels[0].read<u32>(8);
		libgte::SVECTOR sVector3{ rawModels[0].read<libgte::SVECTOR>(0x1AC) };
        libgte::VECTOR vector1{};
		libgte::ApplyMatrix(&matrixs[19], &sVector3, &vector1);
		const auto yCoord{ static_cast<s16>(vectors[19].vy + vector1.vy) };	

		auto writeYCoord = [yCoord](RawTypeBrowser* raw, u32 offset) 
		{
			*raw = offset;
			const auto nbFrames{ raw->read<u16>() };
			*raw += raw->read<u8>(3) & 0x80 ? 0xAA : 0xA6;

			for (u16 j{}; j < nbFrames; ++j)
			{
				const auto yMinionCoord{ raw->read<s16>(j * Model::Minion::Animation::size) };
				raw->write(s16(yMinionCoord - yCoord), j * Model::Minion::Animation::size);
			}
		};
        
		for (u32 i{ 1 }; i < Model::Minion::Animation::nbPacked; ++i)
		{
			writeYCoord(&rawModels[0], Model::Minion::Animation::begin + packedBegin[i]);
		}

		for (u32 i{}; i < Model::Minion::Animation::nbUnpacked; ++i)
		{
			writeYCoord(&rawModels[0], animations.offset(i));
		}     
	}
};